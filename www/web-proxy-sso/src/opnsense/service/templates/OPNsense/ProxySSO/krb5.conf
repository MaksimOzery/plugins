# Autogenerated config. Do not edit manualy.
{% set ldap_method = [] %}
{% if helpers.exists('OPNsense.proxy.forward.authentication.method') %}
{%      for method in OPNsense.proxy.forward.authentication.method.split(",") %}
{%          for server in helpers.toList('system.authserver') %}
{%              if server.type == 'ldap' and server.name == method %}
{%                  do ldap_method.append(server) %}
{%              endif %}
{%          endfor %}
{%      endfor %}
{% endif %}

{% if ldap_method|length > 0 and helpers.exists('OPNsense.ProxySSO.EnableSSO') and OPNsense.ProxySSO.EnableSSO|default('0') == '1' %}
[libdefaults]
{%      set domain = [] %}
{%      for element in ldaps[0].ldap_basedn.split(",") %}
{%          do domain.append(element.split("=")[1]) %}
{%      endfor %}
         default_realm = {{ domain|join(".")|upper }}
         dns_lookup_kdc = no
         dns_lookup_realm = no
         ticket_lifetime = 24h
         default_keytab_name = /usr/local/etc/squid/squid.keytab
{%      if helpers.exists('OPNsense.ProxySSO.ADKerberosImplementation') and OPNsense.ProxySSO.ADKerberosImplementation == 'W2003' %}
         default_as_etypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5
         default_tgs_etypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5
{%      else %}
         default_as_etypes = aes256-cts-hmac-sha1-96 arcfour-hmac-md5 des-cbc-crc des-cbc-md5
         default_tgs_etypes = aes256-cts-hmac-sha1-96 arcfour-hmac-md5 des-cbc-crc des-cbc-md5
{%      endif %}
[realms]
{%      for ldap in ldaps %}
{%          set domain = [] %}
{%          for element in ldap.ldap_basedn.split(",") %}
{%              do domain.append(element.split("=")[1]) %}
{%          endfor %}
         {{ domain|join(".")|upper }} = {
                 kdc = {{ ldap.host }}
                 admin_server = {{ ldap.host }}
                 default_domain = {{ domain|join(".") }}
         }
{%      endfor %}
[domain_realm]
{%      for ldap in ldaps %}
{%          set domain = [] %}
{%          for element in ldap.ldap_basedn.split(",") %}
{%              do domain.append(element.split("=")[1]) %}
{%          endfor %}
         .{{ domain|join(".") }} = .{{ domain|join(".")|upper }}
         {{ domain|join(".") }} = {{ domain|join(".")|upper }}
{%      endfor %}
{% endif %}
